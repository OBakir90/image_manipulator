[{"C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\App.js":"1","C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\reportWebVitals.js":"2","C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\components\\ImageInput.js":"3","C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\components\\ViewImage.js":"4","C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\index.js":"5","C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\components\\GetWidth.js":"6"},{"size":3988,"mtime":1607820561193,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1606745142214,"results":"9","hashOfConfig":"8"},{"size":2374,"mtime":1607793973902,"results":"10","hashOfConfig":"8"},{"size":4957,"mtime":1607820262232,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1607730565973,"results":"12","hashOfConfig":"8"},{"size":445,"mtime":1607819925467,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1twu5r",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\App.js",["29"],"import React, {useState, useEffect} from 'react'\nimport ImageInput from './components/ImageInput'\nimport ViewImage from './components/ViewImage'\nimport styled from 'styled-components'\nimport Clarifai from 'clarifai';\n\nimport left from './images/aaron-burden-Bycd2wF5vQU-unsplash.jpg'\nimport right from './images/syd-sujuaan-2OowobmZRFE-unsplash.jpg'\nimport color from './images/colors.PNG'\nimport crop from './images/crop.PNG'\nimport faces from './images/faces.PNG'\n\n\nconst App=()=>{\n  const [imageUrl, setImageUrl] = useState(null)  \n  const [selected, setSelected] = useState(null)\n  const [faceBox, setFaceBox] = useState(null)\n  const [colors, setColors] = useState(null)\n\n  const app = new Clarifai.App({\n    apiKey: 'fe053916ea194ebfa8e447fad43a70ec'\n  });\n\n  const detectFaces = ()=>{\n    setSelected('face')\n    imageUrl?app.workflow.predict('12345', imageUrl).then(\n        (response)=>{\n          setFaceBox(response.results[0].outputs[2].data.regions.map(p=>p.region_info.bounding_box))\n        },\n    ).catch(\n      console.log('error')\n    ) : console.log('Please enter a url')  \n  }\n\n  const croppImage = ()=>{\n    setSelected('cropp')\n  }\n\n  const getColors = ()=>{\n    setSelected('colors')\n    imageUrl?app.workflow.predict('1234567', imageUrl).then(\n      (response)=>{\n        setColors(response.results[0].outputs[0].data.colors)\n        console.log('colors', response.results[0].outputs[0].data.colors)\n      },\n    ).catch(\n      console.log('error')\n    ) : console.log('Please enter a url')  \n  }\n\n  return (\n    <Screen className=\"App\">\n      <Left>\n        <Img src={color} alt=''/>\n        <Img src={faces} alt=''/>\n        <Img src={crop} alt=''/> \n      </Left>\n      <Container>\n        <Header>\n          <span style={{color:''}}></span>\n                <span style={{color:'red'}}>I</span>\n                <span style={{color:'yellow'}}>m</span>\n                <span style={{color:'orange'}}>a</span>\n                <span style={{color:'blue'}}>g</span>\n                <span style={{color:'green'}}>e</span> \n                <span> </span>\n                <span style={{color:'black'}}>M</span>\n                <span style={{color:'red'}}>a</span>\n                <span style={{color:'violet'}}>n</span>\n                <span style={{color:'green'}}>i</span>\n                <span style={{color:'brown'}}>p</span>\n                <span style={{color:'turquoise'}}>u</span>\n                <span style={{color:'yellow'}}>l</span>\n                <span style={{color:'orange'}}>a</span>\n                <span style={{color:'blue'}}>t</span>\n                <span style={{color:'black'}}>o</span>\n                <span style={{color:'red'}}>r</span>\n               </Header>\n        <ImageInput imageUrl={imageUrl} setImageUrl={setImageUrl} setFaceBox={setFaceBox} detectFaces={detectFaces} croppImage={croppImage} getColors={getColors}/>\n        <ViewImage imageUrl={imageUrl} faceBox={faceBox} selected={selected} colors={colors}/>\n      </Container>\n      <Right>\n        <Img src={crop} alt=''/> \n        <Img src={color} alt=''/>\n        <Img src={faces} alt=''/>\n      </Right>\n    </Screen>\n  );\n}\n\nexport default App;\n\n\nconst Screen = styled.div`\n  width:100%;\n  min-height:100vh;\n  justify-content:center;\n  background-color:#f1f1f1;\n  display:flex;\n\n`\n\nconst Container=styled.div`\n  display:flex;\n  flex-direction:column;\n  width:60%;\n  align-items:center;\n`\nconst Header =styled.div`\n  font-size:90px;\n  font-weight:900;\n  font-family:East Sea Dokdo;\n  @media (max-width: 768px) {\n    font-size:66px;\n  }\n  @media (max-width: 568px) {\n    font-size:36px; \n  }\n\n`\nconst Img=styled.img`\n  width:90%;\n  margin:35px 5%;\n`\n\nconst Left=styled.div`\n  width:20%;\n  background-image: url(${left});\n  display:flex;\n  flex-direction:column;\n  justify-content:center;\n  align-items:center;\n`\n\nconst Right=styled.div`\n  width:20%;  \n  background-image: url(${right});\n  display:flex;\n  flex-direction:column;\n  justify-content:center;\n  align-items:center;\n`","C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\reportWebVitals.js",[],"C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\components\\ImageInput.js",[],"C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\components\\ViewImage.js",["30","31"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport {Image} from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.min.css\";\r\nimport GetWidth from './GetWidth'\r\n\r\nconst ViewImage = ({imageUrl, faceBox, colors, selected}) => {\r\n    const [imgDim, setImgDim] = useState(null)\r\n    const [frames, setFrames] = useState([])\r\n    const [croppedImage, setCroppedImage] = useState(null)\r\n    const uploadedImage = useRef(null)\r\n  \r\n    const screenWidth = GetWidth();\r\n    console.log({screenWidth})\r\n\r\n    const onCrop = () => {\r\n        const imageElement = uploadedImage.current;\r\n        const cropper = imageElement.cropper;\r\n        setCroppedImage(cropper.getCroppedCanvas().toDataURL())\r\n    };\r\n \r\n\r\n    useEffect(()=>{\r\n        let boxes=[]\r\n        faceBox&&faceBox.map((face, index)=>{\r\n            boxes.push({top:face.top_row*imgDim.height,\r\n            left:face.left_col*imgDim.width,\r\n            width:face.right_col*imgDim.width-face.left_col*imgDim.width,        \r\n            height:face.bottom_row*imgDim.height-face.top_row*imgDim.height\r\n            })\r\n        })\r\n        setFrames(boxes)\r\n    },[imgDim, faceBox] )\r\n\r\n\r\n    const getImgDimensions = ({target:Image})=>{\r\n        console.log('image', Image, Image.clientWidth, Image.width, Image.clientHeight, Image.height)\r\n        setImgDim({\r\n            width:Number(Image.width),\r\n            height:Number(Image.height)\r\n        }) \r\n    }\r\n    return (\r\n        <Container>\r\n            {!selected&&imageUrl&&<BasicImg src={imageUrl} alt='unselected'/>}\r\n            {selected==='face'&&imageUrl&&<><img id='up_img' ref={uploadedImage} src={imageUrl} onLoad={getImgDimensions} alt='myimage' width='80%' height='auto'/>   \r\n                {frames&&frames.map(frame=><FaceBox style={frame?{top:frame.top, left:frame.left, width:frame.width, height:frame.height}:null}/>)}</>        \r\n            }\r\n            {selected==='cropp'&&imageUrl&&<>\r\n                <StyledCropper\r\n                    src={imageUrl} \r\n                    guides={false}\r\n                    crop={onCrop}\r\n                    ref={uploadedImage}\r\n                    alt='myimage'\r\n                    style={{width:screenWidth*0.5, height:'auto'}}\r\n                />\r\n                <CroppedImg src={croppedImage} alt=\"Cropped_Image\" style={{width:screenWidth*0.5}}/>\r\n            </>\r\n            }\r\n            {selected==='colors'&&imageUrl&&<>\r\n                <img src={imageUrl} alt='unselected' style={{width: '80%', height:'auto'}}/>\r\n                {colors&&<ColorsCont>\r\n                            {colors.map((color,i)=>{\r\n                                return  (\r\n                                    <ColorCont>\r\n                                        <ColorBox key={i} style={{backgroundColor:color.w3c.hex}}/>\r\n                                        <ColorName>{color.w3c.name}</ColorName>\r\n                                    </ColorCont>\r\n                                )\r\n                                })\r\n                            }\r\n                        </ColorsCont>\r\n                }                  \r\n            </>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ViewImage\r\n\r\nconst Container =styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    justify-content:center;\r\n    align-items:center;\r\n    width:100%;\r\n`\r\n\r\nconst StyledCropper=styled(Cropper)`\r\n    width:500px;\r\n    height:auto;\r\n    @media (max-width: 768px) {\r\n        width:300px; \r\n        height:200px;\r\n    }\r\n    @media (max-width: 568px) {\r\n        width:230px; \r\n        height:120px;\r\n    }\r\n    \r\n`\r\n\r\nconst FaceBox = styled.div`\r\n    position: absolute;\r\n    box-shadow: 0 0 0 3px red inset;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n`\r\n\r\nconst CroppedImg = styled.img`\r\n    // width:500px; \r\n    height:360px;\r\n    border:2px solid #f1f1f1;\r\n    @media (max-width: 768px) {\r\n    //     width:300px; \r\n        height:240px;\r\n    }\r\n    @media (max-width: 568px) {\r\n    //     width:230px; \r\n        height:180px;\r\n    }\r\n    \r\n`\r\n\r\nconst ColorsCont = styled.div`\r\n    display:flex;\r\n    width:80%;\r\n    justify-content:center;\r\n    background-color:yellow;\r\n    flex-wrap:wrap;\r\n`\r\n\r\nconst BasicImg = styled.img`\r\n    width:80%;\r\n    height:auto;\r\n`\r\n\r\nconst ColorCont=styled.div`\r\n    display:flex; \r\n    flex-direction:column; \r\n    align-items:center;\r\n`\r\n\r\nconst ColorBox=styled.div`\r\n    display:flex; \r\n    width:40px; \r\n    height:30px;\r\n    margin:8px;\r\n    @media (max-width: 768px) {\r\n        width:25px; \r\n        height:15px;\r\n    }\r\n    @media (max-width: 568px) {\r\n        width:14px; \r\n        height:8px;\r\n    }\r\n`\r\n\r\nconst ColorName = styled.div`\r\n    font-size:10px;\r\n    @media (max-width: 768px) {\r\n        font-size:8px;\r\n    }\r\n    @media (max-width: 568px) {\r\n        font-size:6px;\r\n    }\r\n`","C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\index.js",[],"C:\\Users\\ORHAN\\Documents\\individual_works\\CLARIFAI_IMAGE\\clarifai_image\\src\\components\\GetWidth.js",["32"],"import React,{ useState, useEffect } from 'react';\r\n\r\nconst GetWidth = () => {\r\n    const [width, setWidth] = useState(window.innerWidth)\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWidth(window.innerWidth)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, [])\r\n\r\n    return width;\r\n}\r\n\r\nexport default GetWidth\r\n",{"ruleId":"33","severity":1,"message":"34","line":1,"column":26,"nodeType":"35","messageId":"36","endLine":1,"endColumn":35},{"ruleId":"33","severity":1,"message":"37","line":2,"column":9,"nodeType":"35","messageId":"36","endLine":2,"endColumn":14},{"ruleId":"38","severity":1,"message":"39","line":26,"column":43,"nodeType":"40","messageId":"41","endLine":26,"endColumn":45},{"ruleId":"33","severity":1,"message":"42","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":13},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'React' is defined but never used."]